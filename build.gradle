plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(17))

minecraft {
    mappings channel: 'parchment', version: "${project.parchment_version}-${project.minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        def mixinStuff = [
                '-Dmixin.debug.export=true',
                '-Dmixin.hotSwap=true',
                '-Dmixin.checks.interfaces=true',
                '-mixin.config="reputation.mixin.json"'
        ]
        client {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args mixinStuff
            mods {
                reputation {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args mixinStuff
            mods {
                reputation {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'reputation', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                reputation {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs 'build/libs'
    }
}

dependencies {
    //Minecraft
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")

    //Mixin
    annotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")

    //Locally Implemented Mods
    implementation(fg.deobf("com.feywild.quest_giver:Quest_Giver:${project.questgiver_version}"))

    //Implemented Mods
    implementation(fg.deobf("curse.maven:guard-villagers-360203:${project.guards_version}"))
    implementation(fg.deobf("curse.maven:morevillagers-484954:${project.morevillagers_version}"))
    implementation(fg.deobf("curse.maven:the-impossible-library-661115:${project.til_version}"))

    //Runtime Mods
    runtimeOnly(fg.deobf("curse.maven:afptweaks-638098:${project.afptweaks_version}"))
    runtimeOnly(fg.deobf("curse.maven:atlas-lib-463826:${project.atlaslib_version}"))
    runtimeOnly(fg.deobf("curse.maven:configured-457570:${project.configured_version}"))
    runtimeOnly(fg.deobf("curse.maven:epicfigt-405076:${project.epicfight_version}"))
    runtimeOnly(fg.deobf("curse.maven:follow-me-463841:${project.followme_version}"))
    runtimeOnly(fg.deobf("curse.maven:jei-238222:${project.jei_version}"))
    runtimeOnly(fg.deobf("curse.maven:libx-412525:${project.libx_version}"))
}

mixin {
    add sourceSets.main, 'reputation.refmap.json'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
}

jar {
    manifest {
        attributes([
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "reputation.mixin.json"
        ])
    }
}

tasks.jar.finalizedBy('reobfJar')